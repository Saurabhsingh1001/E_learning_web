lofinfrom.jsx

import { useState } from 'react'

import { useNavigate } from 'react-router-dom'
import axios from 'axios'

export default function LoginForm() {

  const [email,setEmail]=useState()
  const[password,setPassword]=useState()
  const[errorMessage,setErrorMessage]=useState()
  const navigate =useNavigate()

  function handleclick(){
    navigate('/register')
  }
  async function Submit(e) {
    e.preventDefault();
 
    console.log("Submitting form...");
    if (!email || !password) {
      setErrorMessage("All fields are required to be filled!!");
      return;
    }
 
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      setErrorMessage("Invalid email format");
      return;
    }
 
    try {
      const response = await axios.post("http://localhost:5000/login", { email, password });
 
      if (response.data.token) {
        console.log("Token received:", response.data.token);
        localStorage.setItem('token', response.data.token);
 
        navigate('/login/corousel');
      } else {
        console.log("No token received");
        setErrorMessage("Invalid email or password");
      }
    } catch (error) {
      console.error("Error during login:", error);
      setErrorMessage("Username or password is incorrect");
      console.error(error);
    }
  }

 

 

  

 return(

      <section>

        

        <div className='register'>

          <div className='col-2'>

          <video autoPlay loop muted id="videopart">
    
            <source src="video1.mp4" type="video/mp4" />
                Your browser does not support the video tag.
            </video>
            
              <div className="custom-div" onClick={handleclick}>
              <h2 id="videohead">New User</h2></div>
            
          </div>

          

          <div className='col-1'>

           

            <h2 id="loginheading">Login</h2>

 
            {errorMessage && <div className="error-message">{errorMessage}</div>}
            <form onSubmit={Submit} id='form' className='flex flex-col'>

              <input type="email" placeholder='username'onChange={(e)=>setEmail(e.target.value)} />

              <input type="password" placeholder='password' onChange={(e)=>setPassword(e.target.value)}/>

              <button type="submit" className='btn'>Login</button>

              

            </form>

 

          </div>

   

        </div>

      </section>

  )

}
--------------------------------------------------------------------------------
app.jsx

import React, { useEffect, useState } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import LoginForm from './components/Pages/login/LoginForm';
import AdminLoginForm from './components/Pages/login/adminLogin';
import Register from './components/Pages/registration/Register';
import Corousel from './components/Pages/homePage/Corousel.jsx';
import Home from './components/Pages/homePage/home.jsx';

const ProtectedRoute = ({ element: Component }) => {
  const [authenticated, setAuthenticated] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem('token');
    setAuthenticated(!!token);
  }, []);

  return authenticated ? <Component /> : <Navigate to="/login" />;
};

function App() {
  return (
    <main>
      <Routes>
        <Route path="/login" element={<LoginForm />} />
        <Route path="/register" element={<Register />} />
        <Route path="/admin/login" element={<AdminLoginForm />} />
        <Route path="/login/corousel" element={<ProtectedRoute element={<Corousel debugMessage="Corousel component rendered"/>} />} />
        <Route path="/login/home" element={<ProtectedRoute element={<Home />} />} />
      </Routes>
    </main>
  );
}

export default App;


-------------------------------------------------------------------------------------

auth.js

const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Users = mongoose.model('user');
const bcrypt = require('bcryptjs');
const jwt =require('jsonwebtoken');
const{ JWT_SECRET } = require('../keys');
// middleware
const jwtMiddleware = require('../Middleware/requirelogin')
 
router.post("/signUp", async (req, res) => {
    const { name, email, password } = req.body;
 
    try {
        if (!name || !email || !password) {
            return res.status(400).json({ success: false, message: "All fields are required to be filled!!" });
        }
 
        const savedUser = await Users.findOne({ email: email });
 
        if (savedUser) {
            return res.status(400).json({ success: false, message: "Email id already exists" });
        }
 
        const hashedPassword = await bcrypt.hash(password, 12);
 
        const user = new Users({
            email,
            password: hashedPassword,
            name
        });
 
        await user.save();
 
        return res.json({ success: true, message: "Successfully Registered" });
    } catch (err) {
        console.log(err);
        return res.status(500).json({ success: false, message: "Internal Server Error" });
    }
});


router.get('/login/corousel', jwtMiddleware, (req, res)=>{
  res.json({message:'User is authenticated for home page'});
});

router.post("/login", async (req, res) => {
    const { email, password } = req.body;
   
    try {
      const savedUser = await Users.findOne({ email: email });
   
     
      if (!savedUser) {
        return res.status(401).json({ error: "Invalid email or password" });
      }
   
     
      const passwordMatch = await bcrypt.compare(password, savedUser.password);
   
      if (passwordMatch) {
       
        const token = jwt.sign({ _id: savedUser._id }, JWT_SECRET, { expiresIn: '1h' });
            console.log('Token:', token);
            res.json({ token });
      } else {
       
        res.status(401).json({ error: "Invalid email or password" });
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "An error occurred" });
    }
  });

  module.exports = router;

  --------------------------------------------------------------------------------
  middelware.js

  const jwt = require('jsonwebtoken');
const { JWT_SECRET } = require('../keys');
const mongoose = require('mongoose');
const User = mongoose.model("user");

module.exports = async (req, res, next) => {
  try {
    const { authorization } = req.headers;

    if (!authorization) {
      return res.status(403).json({ error: "You must be logged in" });
    }

    const token = authorization.replace("Bearer ", "");
    const decoded = jwt.verify(token, JWT_SECRET);

    const user = await User.findById(decoded._id);

    if (!user) {
      return res.status(403).json({ error: "User not found" });
    }

    req.user = user;
    next();
  } catch (error) {
    return res.status(403).json({ error: "Invalid or expired token" });
  }
};


